// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "comments-system/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PostService is an autogenerated mock type for the PostService type
type PostService struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, input
func (_m *PostService) CreatePost(ctx context.Context, input models.CreatePostInput) (models.Post, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePostInput) (models.Post, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.CreatePostInput) models.Post); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.CreatePostInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPost provides a mock function with given fields: ctx, id
func (_m *PostService) GetPost(ctx context.Context, id string) (models.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Post); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPosts provides a mock function with given fields: ctx, limit, offset
func (_m *PostService) GetPosts(ctx context.Context, limit int, offset int) ([]models.Post, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 []models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]models.Post, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []models.Post); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleComments provides a mock function with given fields: ctx, postID, enabled
func (_m *PostService) ToggleComments(ctx context.Context, postID string, enabled bool) (models.Post, error) {
	ret := _m.Called(ctx, postID, enabled)

	if len(ret) == 0 {
		panic("no return value specified for ToggleComments")
	}

	var r0 models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (models.Post, error)); ok {
		return rf(ctx, postID, enabled)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) models.Post); ok {
		r0 = rf(ctx, postID, enabled)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, postID, enabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPostService creates a new instance of PostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostService {
	mock := &PostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
